
assignment4_4.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  1e:	00 
  1f:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
  26:	00 
  27:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e <main+0x2e>
  2e:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 35 <main+0x35>
  35:	e8 00 00 00 00       	callq  3a <main+0x3a>
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 44 <main+0x44>
  44:	48 89 c6             	mov    %rax,%rsi
  47:	48 89 d7             	mov    %rdx,%rdi
  4a:	e8 00 00 00 00       	callq  4f <main+0x4f>
  4f:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  53:	48 89 c6             	mov    %rax,%rsi
  56:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 5d <main+0x5d>
  5d:	e8 00 00 00 00       	callq  62 <main+0x62>
  62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  66:	48 85 c0             	test   %rax,%rax
  69:	0f 84 83 00 00 00    	je     f2 <main+0xf2>
  6f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  73:	48 ba 67 66 66 66 66 	movabs $0x6666666666666667,%rdx
  7a:	66 66 66 
  7d:	48 89 c8             	mov    %rcx,%rax
  80:	48 f7 ea             	imul   %rdx
  83:	48 c1 fa 02          	sar    $0x2,%rdx
  87:	48 89 c8             	mov    %rcx,%rax
  8a:	48 c1 f8 3f          	sar    $0x3f,%rax
  8e:	48 29 c2             	sub    %rax,%rdx
  91:	48 89 d0             	mov    %rdx,%rax
  94:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  98:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  9c:	48 89 d0             	mov    %rdx,%rax
  9f:	48 c1 e0 02          	shl    $0x2,%rax
  a3:	48 01 d0             	add    %rdx,%rax
  a6:	48 01 c0             	add    %rax,%rax
  a9:	48 29 c1             	sub    %rax,%rcx
  ac:	48 89 c8             	mov    %rcx,%rax
  af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  b7:	48 0f af 45 e8       	imul   -0x18(%rbp),%rax
  bc:	48 01 45 e0          	add    %rax,-0x20(%rbp)
  c0:	48 d1 65 e8          	shlq   -0x18(%rbp)
  c4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  c8:	48 ba 67 66 66 66 66 	movabs $0x6666666666666667,%rdx
  cf:	66 66 66 
  d2:	48 89 c8             	mov    %rcx,%rax
  d5:	48 f7 ea             	imul   %rdx
  d8:	48 c1 fa 02          	sar    $0x2,%rdx
  dc:	48 89 c8             	mov    %rcx,%rax
  df:	48 c1 f8 3f          	sar    $0x3f,%rax
  e3:	48 29 c2             	sub    %rax,%rdx
  e6:	48 89 d0             	mov    %rdx,%rax
  e9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  ed:	e9 70 ff ff ff       	jmpq   62 <main+0x62>
  f2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # f9 <main+0xf9>
  f9:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 100 <main+0x100>
 100:	e8 00 00 00 00       	callq  105 <main+0x105>
 105:	48 89 c2             	mov    %rax,%rdx
 108:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 10c:	48 89 c6             	mov    %rax,%rsi
 10f:	48 89 d7             	mov    %rdx,%rdi
 112:	e8 00 00 00 00       	callq  117 <main+0x117>
 117:	48 89 c2             	mov    %rax,%rdx
 11a:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 121 <main+0x121>
 121:	48 89 c6             	mov    %rax,%rsi
 124:	48 89 d7             	mov    %rdx,%rdi
 127:	e8 00 00 00 00       	callq  12c <main+0x12c>
 12c:	b8 00 00 00 00       	mov    $0x0,%eax
 131:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
 135:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
 13c:	00 00 
 13e:	74 05                	je     145 <main+0x145>
 140:	e8 00 00 00 00       	callq  145 <main+0x145>
 145:	c9                   	leaveq 
 146:	c3                   	retq   

0000000000000147 <_Z41__static_initialization_and_destruction_0ii>:
 147:	55                   	push   %rbp
 148:	48 89 e5             	mov    %rsp,%rbp
 14b:	48 83 ec 10          	sub    $0x10,%rsp
 14f:	89 7d fc             	mov    %edi,-0x4(%rbp)
 152:	89 75 f8             	mov    %esi,-0x8(%rbp)
 155:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
 159:	75 32                	jne    18d <_Z41__static_initialization_and_destruction_0ii+0x46>
 15b:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
 162:	75 29                	jne    18d <_Z41__static_initialization_and_destruction_0ii+0x46>
 164:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 16b <_Z41__static_initialization_and_destruction_0ii+0x24>
 16b:	e8 00 00 00 00       	callq  170 <_Z41__static_initialization_and_destruction_0ii+0x29>
 170:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 177 <_Z41__static_initialization_and_destruction_0ii+0x30>
 177:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 17e <_Z41__static_initialization_and_destruction_0ii+0x37>
 17e:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 185 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 185:	48 89 c7             	mov    %rax,%rdi
 188:	e8 00 00 00 00       	callq  18d <_Z41__static_initialization_and_destruction_0ii+0x46>
 18d:	90                   	nop
 18e:	c9                   	leaveq 
 18f:	c3                   	retq   

0000000000000190 <_GLOBAL__sub_I_main>:
 190:	55                   	push   %rbp
 191:	48 89 e5             	mov    %rsp,%rbp
 194:	be ff ff 00 00       	mov    $0xffff,%esi
 199:	bf 01 00 00 00       	mov    $0x1,%edi
 19e:	e8 a4 ff ff ff       	callq  147 <_Z41__static_initialization_and_destruction_0ii>
 1a3:	5d                   	pop    %rbp
 1a4:	c3                   	retq   
